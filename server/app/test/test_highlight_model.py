import unittest
import datetime

from app.main import db

import json
from app.main.model.highlight import Highlight
from app.test.base import BaseTestCase
from app.main.controller.highlight_controller import *
from app.main.controller.user_controller import *


def register_user(self, name):
    return self.client.post(
        "/user/",
        data=json.dumps(
            dict(email=name + "@test.com", username=name, password="test",)
        ),
        content_type="application/json",
    )


def login_user(self, name):
    return self.client.post(
        "/auth/login",
        data=json.dumps(dict(email=name + "@test.com", password="test")),
        content_type="application/json",
    )


def save_text(text_id, title, user_public_id):
    new_text = Text(
        text_id=text_id,
        created_on=datetime.datetime.utcnow(),
        text_title=title,
        user_public_id=user_public_id,
        text_body="test",
    )
    db.session.add(new_text)
    db.session.commit()


def user_add_text(self, response_login, title, body):
    # add text
    return self.client.post(
        "/text/",
        headers=dict(
            Authorization=json.loads(response_login.data.decode())["Authorization"]
        ),
        data=json.dumps(dict(text_title=title, text_body=body)),
        content_type="application/json",
    )


class TestHighlight(BaseTestCase):
    def test_valid_add_highlight_manual(self):
        with self.client:
            register_response = register_user(self, "test_manual")
            response_login = login_user(self, "test_manual")
            add_text = user_add_text(
                self, response_login, "test_manual", "test_manual"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 201)
            self.assertTrue(data_add_highlight["status"] == "success")
            self.assertTrue(data_add_highlight["message"] == "Highlight successfully added")
            self.assertEqual(data_add_highlight["highlight_id"], 1)

    def test_valid_add_highlight_autogenerated(self):
        with self.client:
            register_response = register_user(self, "test_autogenerated")
            response_login = login_user(self, "test_autogenerated")
            add_text = user_add_text(
                self, response_login, "test_autogenerated", "test_autogenerated"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 201)
            self.assertTrue(data_add_highlight["status"] == "success")
            self.assertTrue(data_add_highlight["message"] == "Highlight successfully added")
            self.assertEqual(data_add_highlight["highlight_id"], 1)

    def test_valid_add_highlight_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 201)
            self.assertTrue(data_add_highlight["status"] == "success")
            self.assertTrue(data_add_highlight["message"] == "Highlight successfully added")
            self.assertEqual(data_add_highlight["highlight_id"], 1)

    def test_invalid_add_highlight_type(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="a", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "invalid highlight type")

    def test_invalid_add_highlight_negative_offset_start(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=-1, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_start cannot be negative")
            
    def test_invalid_add_highlight_negative_offset_end(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=-2, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_end cannot be negative")

    def test_invalid_add_highlight_offset_start_greater_than_offset_end(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=3, offset_end=2, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_end must be strictly larger than offset_end")

    def test_invalid_add_highlight_offset_start_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", offset_start=3, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_start cannot exist for type 'Notes'")

    def test_invalid_add_highlight_offset_end_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", offset_end=3, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_end cannot exist for type 'Notes'")

    def test_invalid_add_highlight_offset_end_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", offset_end=3, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 400)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "offset_end cannot exist for type 'Notes'")

    def test_invalid_add_highlight_text(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            response_add_highlight = self.client.post(
                "/highlight/text=test",
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight.data.decode())
            self.assertEqual(response_add_highlight.status_code, 404)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "invalid text")

    def test_invalid_add_highlight_duplicate_not_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight1 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=2, offset_end=3, content="string")),
                content_type="application/json",
            )
            response_add_highlight2 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=2, offset_end=3, content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight2.data.decode())
            self.assertEqual(response_add_highlight2.status_code, 409)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "highlight already exists")

    def test_invalid_add_highlight_duplicate_notes(self):
        with self.client:
            register_response = register_user(self, "test_notes")
            response_login = login_user(self, "test_notes")
            add_text = user_add_text(
                self, response_login, "test_notes", "test_notes"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight1 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            response_add_highlight2 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_add_highlight = json.loads(response_add_highlight2.data.decode())
            self.assertEqual(response_add_highlight2.status_code, 409)
            self.assertTrue(data_add_highlight["status"] == "fail")
            self.assertTrue(data_add_highlight["message"] == "highlight already exists")

    def test_valid_get_highlight(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            user_public_id = json.loads(register_response.data.decode())["user_public_id"]
            response_add_highlight1 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            response_add_highlight2 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end = 5, content="string")),
                content_type="application/json",
            )
            response_add_highlight3 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=3, offset_end = 10, content="string")),
                content_type="application/json",
            )
            response_get_highlight = self.client.get(
                "/highlight/user=" + str(user_public_id) + "/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_get_highlight = json.loads(response_get_highlight.data.decode())
            self.assertEqual(response_get_highlight.status_code, 200)
            self.assertTrue(data_get_highlight["data"] == [
                {
                    "type": "Notes",
                    "offset_start": None,
                    "offset_end": None,
                    "content": "string"
                },
                {
                    "type": "Autogenerated",
                    "offset_start": 0,
                    "offset_end": 5,
                    "content": "string"
                },{
                    "type": "Manual",
                    "offset_start": 3,
                    "offset_end": 10,
                    "content": "string"
                }
            ])

    def test_invalid_get_highlight_user(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            user_public_id = json.loads(register_response.data.decode())["user_public_id"]
            response_add_highlight1 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            response_add_highlight2 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end = 5, content="string")),
                content_type="application/json",
            )
            response_add_highlight3 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=3, offset_end = 10, content="string")),
                content_type="application/json",
            )
            response_get_highlight = self.client.get(
                "/highlight/user=a" + "/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_get_highlight = json.loads(response_get_highlight.data.decode())
            self.assertEqual(response_get_highlight.status_code, 404)
            self.assertTrue(data_get_highlight["data"] == {
                    "type": None,
                    "offset_start": None,
                    "offset_end": None,
                    "content": None
                })

    def test_invalid_get_highlight_text(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            user_public_id = json.loads(register_response.data.decode())["user_public_id"]
            response_add_highlight1 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            response_add_highlight2 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end = 5, content="string")),
                content_type="application/json",
            )
            response_add_highlight3 = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=3, offset_end = 10, content="string")),
                content_type="application/json",
            )
            response_get_highlight = self.client.get(
                "/highlight/user=" + str(user_public_id) + "/text=a",
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_get_highlight = json.loads(response_get_highlight.data.decode())
            self.assertEqual(response_get_highlight.status_code, 404)
            self.assertTrue(data_get_highlight["data"] == {
                    "type": None,
                    "offset_start": None,
                    "offset_end": None,
                    "content": None
                })

    def test_valid_delete_highlight(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_delete_highlight = self.client.delete(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_delete_highlight = json.loads(response_delete_highlight.data.decode())
            self.assertEqual(response_delete_highlight.status_code, 200)
            self.assertTrue(data_delete_highlight["status"] == "success")
            self.assertTrue(data_delete_highlight["message"] == "highlight successfully deleted")

    def test_invalid_delete_highlight_highlight(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            response_delete_highlight = self.client.delete(
                "/highlight/a",
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_delete_highlight = json.loads(response_delete_highlight.data.decode())
            self.assertEqual(response_delete_highlight.status_code, 404)
            self.assertTrue(data_delete_highlight["status"] == "fail")
            self.assertTrue(data_delete_highlight["message"] == "invalid highlight id")

    def test_invalid_delete_highlight_user(self):
        with self.client:
            register_response1 = register_user(self, "test1")
            response_login1 = login_user(self, "test1")
            add_text = user_add_text(
                self, response_login1, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login1.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            register_response2 = register_user(self, "test2")
            response_login2 = login_user(self, "test2")
            response_delete_highlight = self.client.delete(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login2.data.decode())[
                        "Authorization"
                    ]
                ),
                content_type="application/json",
            )

            data_delete_highlight = json.loads(response_delete_highlight.data.decode())
            self.assertEqual(response_delete_highlight.status_code, 403)
            self.assertTrue(data_delete_highlight["status"] == "fail")
            self.assertTrue(data_delete_highlight["message"] == "user does not have permissions to delete the highlight")

    def test_valid_put_highlight_same_notes(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 200)
            self.assertTrue(data_put_highlight["status"] == "success")
            self.assertTrue(data_put_highlight["message"] == "highlight successfully updated")

    def test_valid_put_highlight_same_not_notes(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 200)
            self.assertTrue(data_put_highlight["status"] == "success")
            self.assertTrue(data_put_highlight["message"] == "highlight successfully updated")

    def test_valid_put_highlight_notes_to_not_notes(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 200)
            self.assertTrue(data_put_highlight["status"] == "success")
            self.assertTrue(data_put_highlight["message"] == "highlight successfully updated")

    def test_valid_put_highlight_not_notes_to_notes(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=0, offset_end=5, content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 200)
            self.assertTrue(data_put_highlight["status"] == "success")
            self.assertTrue(data_put_highlight["message"] == "highlight successfully updated")

    def test_invalid_put_highlight_highlight(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/a",
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 404)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "invalid highlight id")

    def test_invalid_put_highlight_type(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="test", content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "invalid highlight type")

    def test_invalid_put_highlight_user(self):
        with self.client:
            register_response1 = register_user(self, "test1")
            response_login1 = login_user(self, "test1")
            add_text = user_add_text(
                self, response_login1, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login1.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            register_response2 = register_user(self, "test2")
            response_login2 = login_user(self, "test2")
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login2.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=2, offset_end=3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 403)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "user does not have permissions to update the highlight")

    def test_invalid_put_highlight_notes_offset_start(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", offset_start=3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "offset_start cannot exist for type 'Notes'")

    def test_invalid_put_highlight_notes_offset_end(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", offset_end=3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "offset_end cannot exist for type 'Notes'")

    def test_invalid_put_highlight_not_notes_offset_start_negative(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=-2, offset_end=3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "offset_start cannot be negative")

    def test_invalid_put_highlight_not_notes_offset_end_negative(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Manual", offset_start=2, offset_end=-3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "offset_end cannot be negative")

    def test_invalid_put_highlight_not_notes_offset_start_greater_than_offset_end(self):
        with self.client:
            register_response = register_user(self, "test")
            response_login = login_user(self, "test")
            add_text = user_add_text(
                self, response_login, "test", "test"
            )
            text_id = json.loads(add_text.data.decode())["text_id"]
            response_add_highlight = self.client.post(
                "/highlight/text=" + str(text_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Notes", content="string")),
                content_type="application/json",
            )
            highlight_id = json.loads(response_add_highlight.data.decode())["highlight_id"]
            response_put_highlight = self.client.put(
                "/highlight/" + str(highlight_id),
                headers=dict(
                    Authorization=json.loads(response_login.data.decode())[
                        "Authorization"
                    ]
                ),
                data=json.dumps(dict(type="Autogenerated", offset_start=5, offset_end=3, content="string")),
                content_type="application/json",
            )

            data_put_highlight = json.loads(response_put_highlight.data.decode())
            self.assertEqual(response_put_highlight.status_code, 400)
            self.assertTrue(data_put_highlight["status"] == "fail")
            self.assertTrue(data_put_highlight["message"] == "offset_end must be strictly larger than offset_start")