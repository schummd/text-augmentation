from flask_restx.fields import Boolean
from app.main import db
from app.main.model.highlight import Highlight
from app.main.model.user import User
from app.main.model.text import Text
from typing import Dict, Tuple

def save_new_highlight(data: Dict[str, str]) -> Tuple[Dict[str, str], int]:
    check, response, code = check_parameters_post(data)
    if not check:
        return response, code

    if not data['type'] == 'Notes':
        new_highlight = Highlight(
            type=data['type'],
            offset_start=data['offset_start'],
            offset_end=data['offset_end'],
            content=data['content'],
            user_public_id=data['user_public_id'],
            text_id=data['text_id']
        )
    else:
        new_highlight = Highlight(
            type=data['type'],
            content=data['content'],
            user_public_id=data['user_public_id'],
            text_id=data['text_id']
        )
    save_changes(new_highlight)
    response = {
        'status': 'success',
        'message': 'Highlight successfully added',
        'highlight_id': new_highlight.id
    }
    return response, 201

def retrieve_all_highlights(data: Dict[str, str]):
    check, response, code = check_parameters_get(data)
    if not check:
        return response, code
    # Generate response
    response = {}
    # Get all highlights matching user id and text id
    highlights = Highlight.query.filter_by(user_public_id=data['user_public_id']).filter_by(text_id=data['text_id']).all()
    
    return highlights, 200

def delete_highlight(highlight_id: int, user: int) -> Tuple[Dict[str, str], int]:
    highlight = Highlight.query.filter_by(id=highlight_id).first()
    if not highlight:
        response = {
            "status": "fail",
            "message": "invalid highlight id"
        }
        return response, 404

    # Check if highlight's user matches the user sending the request
    if highlight.user_public_id != user:
        response = {
            "status": "fail",
            "message": "user does not have permissions to delete the highlight"
        }
        return response, 403

    # Delete highlight
    delete_changes(highlight)

    response = {
        "status": "success",
        "message": "highlight successfully deleted"
    }

    return response, 200

def update_highlight(data: Dict[str, str]) -> Tuple[Dict[str, str], int]:
    highlight = Highlight.query.filter_by(id=data['highlight_id']).first()

    # Check payload
    check, response, code = check_parameters_put(highlight, data)
    if not check:
        return response, code

    # Update highlight
    update_changes(highlight, data)

    response = {
        "status": "success",
        "message": "highlight successfully updated"
    }

    return response, 200

def check_parameters_post(data: Dict[str, str]) -> Tuple[Boolean, Dict[str, str], int]:
    if not (data['type'] == 'Manual' or data['type'] == 'Autogenerated' or data['type'] == 'Notes'):
        response = {
            "status": "fail",
            "message": "invalid highlight type"
        }
        return False, response, 400
    if not data['type'] == 'Notes':
        if data['offset_start'] < 0:
            response = {
                "status": "fail",
                "message": "offset_start cannot be negative"
            }
            return False, response, 400
        if data['offset_end'] < 0:
            response = {
                "status": "fail",
                "message": "offset_end cannot be negative"
            }
            return False, response, 400
        if data['offset_start'] >= data['offset_end']:
            response = {
                "status": "fail",
                "message": "offset_end must be strictly larger than offset_end"
            }
            return False, response, 400
    else:
        if 'offset_start' in data:
            response = {
                "status": "fail",
                "message": "offset_start cannot exist for type 'Notes'"
            }
            return False, response, 400
        if 'offset_end' in data:
            response = {
                "status": "fail",
                "message": "offset_end cannot exist for type 'Notes'"
            }
            return False, response, 400
    user = User.query.filter_by(public_id=data['user_public_id']).first()
    if not user:
        response = {
            "status": "fail",
            "message": "invalid user"
        }
        return False, response, 404
    text = Text.query.filter_by(text_id=data['text_id']).first()
    if not text:
        response = {
            "status": "fail",
            "message": "invalid text"
        }
        return False, response, 404
    duplicate = Highlight.query.filter_by(type=data['type'])\
                               .filter_by(content=data['content'])\
                               .filter_by(user_public_id=data['user_public_id'])\
                               .filter_by(text_id=data['text_id'])
    if not data['type'] == 'Notes':
        duplicate = duplicate.filter_by(offset_start=data['offset_start'])\
                             .filter_by(offset_end=data['offset_end'])
    duplicate = duplicate.first()
    if duplicate:
        response = {
            "status": "fail",
            "message": "highlight already exists"
        }
        return False, response, 409
    return True, {}, 0

def check_parameters_get(data: Dict[str, str]) -> Tuple[Boolean, Dict[str, str], int]:
    user = User.query.filter_by(public_id=data['user_public_id']).first()
    if not user:
        response = {
            "status": "fail",
            "message": "invalid user"
        }
        return False, response, 404
    text = Text.query.filter_by(text_id=data['text_id']).first()
    if not text:
        response = {
            "status": "fail",
            "message": "invalid text"
        }
        return False, response, 404
    return True, {}, 0

def check_parameters_put(highlight: Dict[str, str], data: Dict[str, str]) -> Tuple[Boolean, Dict[str, str], int]:
    if not highlight:
        response = {
            "status": "fail",
            "message": "invalid highlight id"
        }
        return False, response, 404
    if not (data['type'] == 'Manual' or data['type'] == 'Autogenerated' or data['type'] == 'Notes'):
        response = {
            "status": "fail",
            "message": "invalid highlight type"
        }
        return False, response, 400
    if not data['type'] == 'Notes':
        if data['offset_start'] < 0:
            response = {
                "status": "fail",
                "message": "offset_start cannot be negative"
            }
            return False, response, 400
        if data['offset_end'] < 0:
            response = {
                "status": "fail",
                "message": "offset_end cannot be negative"
            }
            return False, response, 400
        if data['offset_start'] >= data['offset_end']:
            response = {
                "status": "fail",
                "message": "offset_end must be strictly larger than offset_start"
            }
            return False, response, 400
    else:
        if 'offset_start' in data:
            response = {
                "status": "fail",
                "message": "offset_start cannot exist for type 'Notes'"
            }
            return False, response, 400
        if 'offset_end' in data:
            response = {
                "status": "fail",
                "message": "offset_end cannot exist for type 'Notes'"
            }
            return False, response, 400
    # Check if highlight's user matches the user sending the request
    if highlight.user_public_id != data['user_public_id']:
        response = {
            "status": "fail",
            "message": "user does not have permissions to update the highlight"
        }
        return False, response, 403

    return True, {}, 0

def save_changes(data: Highlight) -> None:
    db.session.add(data)
    db.session.commit()

def delete_changes(data: Highlight) -> None:
    db.session.delete(data)
    db.session.commit()

def update_changes(highlight: Highlight, data: Dict[str, str]) -> None:
    if 'offset_start' not in data:
        data['offset_start'] = None
        data['offset_end'] = None

    highlight.type = data['type']
    highlight.offset_start = data['offset_start']
    highlight.offset_end = data['offset_end']
    highlight.content = data['content']
    
    db.session.commit()